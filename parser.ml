type token =
  | NUM of (int)
  | ID of (string)
  | INT
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EQUAL
  | EQUALEQUAL
  | LE
  | LT
  | GE
  | GT
  | NOT
  | AND
  | OR
  | IF
  | ELSE
  | WHILE
  | DO
  | READ
  | PRINT
  | SEMICOLON
  | LBRACE
  | RBRACE
  | LBLOCK
  | RBLOCK
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 6 "parser.mly"

# 38 "parser.ml"
let yytransl_const = [|
  259 (* INT *);
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* STAR *);
  263 (* SLASH *);
  264 (* EQUAL *);
  265 (* EQUALEQUAL *);
  266 (* LE *);
  267 (* LT *);
  268 (* GE *);
  269 (* GT *);
  270 (* NOT *);
  271 (* AND *);
  272 (* OR *);
  273 (* IF *);
  274 (* ELSE *);
  275 (* WHILE *);
  276 (* DO *);
  277 (* READ *);
  278 (* PRINT *);
  279 (* SEMICOLON *);
  280 (* LBRACE *);
  281 (* RBRACE *);
  282 (* LBLOCK *);
  283 (* RBLOCK *);
  284 (* LPAREN *);
  285 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\005\000\006\000\006\000\004\000\
\004\000\008\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\009\000\009\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\000\000"

let yylen = "\002\000\
\002\000\004\000\002\000\000\000\003\000\001\000\004\000\002\000\
\000\000\001\000\004\000\004\000\007\000\003\000\007\000\005\000\
\005\000\001\000\001\000\004\000\001\000\001\000\003\000\003\000\
\003\000\003\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\004\000\037\000\000\000\000\000\001\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\018\000\008\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\011\000\
\000\000\000\000\016\000\017\000\000\000\000\000\013\000\015\000"

let yydgoto = "\002\000\
\004\000\020\000\006\000\009\000\010\000\011\000\021\000\000\000\
\031\000\032\000"

let yysindex = "\002\000\
\236\254\000\000\000\000\000\000\005\000\007\255\000\000\244\254\
\055\000\000\000\013\255\015\255\249\254\250\254\238\255\099\000\
\253\254\255\254\000\000\000\000\000\000\254\254\003\255\023\255\
\238\255\238\255\000\000\238\255\238\255\238\255\000\000\093\000\
\002\255\038\255\238\255\048\255\238\255\000\000\000\000\054\000\
\244\255\135\000\135\000\009\000\238\255\238\255\238\255\238\255\
\238\255\238\255\238\255\238\255\238\255\238\255\238\255\000\000\
\025\255\026\255\024\000\033\255\120\000\000\000\099\000\000\000\
\135\000\135\000\135\000\135\000\135\000\135\000\135\000\135\000\
\135\000\135\000\135\000\238\255\034\255\035\255\000\000\000\000\
\042\255\039\000\000\000\000\000\099\000\040\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\059\255\
\000\000\000\000\000\000\000\000\073\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\255\045\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\089\255\102\255\113\255\126\255\137\255\150\255\161\255\174\255\
\185\255\198\255\209\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\070\000\000\000\000\000\000\000\000\000\241\255\000\000\
\247\255\239\255"

let yytablesize = 407
let yytable = "\022\000\
\033\000\036\000\001\000\003\000\007\000\037\000\022\000\040\000\
\041\000\008\000\042\000\043\000\044\000\012\000\023\000\024\000\
\056\000\059\000\025\000\061\000\057\000\026\000\022\000\027\000\
\034\000\038\000\035\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\027\000\058\000\
\027\000\027\000\027\000\027\000\027\000\027\000\028\000\081\000\
\027\000\039\000\027\000\060\000\076\000\022\000\077\000\079\000\
\083\000\084\000\082\000\085\000\006\000\028\000\088\000\028\000\
\028\000\028\000\028\000\028\000\028\000\087\000\005\000\028\000\
\000\000\028\000\019\000\022\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\000\000\019\000\
\019\000\019\000\023\000\019\000\019\000\019\000\019\000\019\000\
\019\000\000\000\000\000\019\000\000\000\019\000\000\000\024\000\
\000\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000\025\000\023\000\000\000\023\000\024\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\000\000\026\000\
\024\000\025\000\024\000\025\000\025\000\025\000\025\000\025\000\
\025\000\000\000\033\000\025\000\000\000\025\000\026\000\000\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\030\000\
\026\000\033\000\026\000\033\000\033\000\033\000\033\000\033\000\
\033\000\000\000\029\000\033\000\000\000\033\000\030\000\000\000\
\030\000\030\000\030\000\030\000\030\000\030\000\000\000\032\000\
\030\000\029\000\030\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\031\000\029\000\000\000\029\000\032\000\000\000\
\032\000\032\000\032\000\032\000\032\000\032\000\000\000\034\000\
\032\000\031\000\032\000\031\000\031\000\031\000\031\000\031\000\
\031\000\000\000\035\000\031\000\000\000\031\000\034\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
\034\000\035\000\034\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\000\000\035\000\000\000\035\000\027\000\013\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\045\000\
\046\000\047\000\048\000\029\000\049\000\050\000\051\000\052\000\
\053\000\000\000\054\000\055\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\045\000\046\000\047\000\048\000\
\063\000\049\000\050\000\051\000\052\000\053\000\000\000\054\000\
\055\000\000\000\000\000\045\000\046\000\047\000\048\000\000\000\
\049\000\050\000\051\000\052\000\053\000\064\000\054\000\055\000\
\000\000\000\000\045\000\046\000\047\000\048\000\000\000\049\000\
\050\000\051\000\052\000\053\000\078\000\054\000\055\000\000\000\
\013\000\045\000\046\000\047\000\048\000\000\000\049\000\050\000\
\051\000\052\000\053\000\086\000\054\000\055\000\009\000\014\000\
\000\000\015\000\016\000\017\000\018\000\000\000\003\000\019\000\
\062\000\000\000\000\000\000\000\000\000\009\000\000\000\009\000\
\009\000\009\000\009\000\000\000\009\000\009\000\013\000\000\000\
\045\000\046\000\047\000\048\000\013\000\049\000\050\000\051\000\
\052\000\053\000\000\000\054\000\055\000\014\000\000\000\015\000\
\016\000\017\000\018\000\014\000\003\000\015\000\016\000\017\000\
\018\000\000\000\003\000\045\000\046\000\047\000\048\000\000\000\
\049\000\050\000\051\000\052\000\053\000\000\000\054\000\055\000\
\000\000\000\000\045\000\046\000\047\000\048\000\080\000\049\000\
\050\000\051\000\052\000\053\000\000\000\054\000\055\000"

let yycheck = "\009\000\
\016\000\004\001\001\000\024\001\000\000\008\001\016\000\025\000\
\026\000\003\001\028\000\029\000\030\000\026\001\002\001\001\001\
\032\000\035\000\026\001\037\000\019\001\028\001\032\000\002\001\
\028\001\023\001\028\001\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\017\001\002\001\
\019\001\020\001\021\001\022\001\023\001\024\001\002\001\063\000\
\027\001\027\001\029\001\004\001\028\001\063\000\029\001\023\001\
\023\001\023\001\076\000\018\001\002\001\017\001\023\001\019\001\
\020\001\021\001\022\001\023\001\024\001\085\000\001\000\027\001\
\255\255\029\001\002\001\085\000\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\002\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\255\255\029\001\255\255\002\001\
\255\255\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\002\001\027\001\255\255\029\001\017\001\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\002\001\
\027\001\017\001\029\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\002\001\027\001\255\255\029\001\017\001\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\002\001\
\027\001\017\001\029\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\002\001\027\001\255\255\029\001\017\001\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\002\001\
\027\001\017\001\029\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\002\001\027\001\255\255\029\001\017\001\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\002\001\
\027\001\017\001\029\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\002\001\027\001\255\255\029\001\017\001\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\017\001\029\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\255\255\029\001\001\001\002\001\
\255\255\255\255\005\001\255\255\255\255\255\255\255\255\004\001\
\005\001\006\001\007\001\014\001\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\255\255\004\001\005\001\006\001\007\001\
\029\001\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\255\255\255\255\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\012\001\013\001\029\001\015\001\016\001\
\255\255\255\255\004\001\005\001\006\001\007\001\255\255\009\001\
\010\001\011\001\012\001\013\001\029\001\015\001\016\001\255\255\
\002\001\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\012\001\013\001\029\001\015\001\016\001\002\001\017\001\
\255\255\019\001\020\001\021\001\022\001\255\255\024\001\025\001\
\027\001\255\255\255\255\255\255\255\255\017\001\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\002\001\255\255\
\004\001\005\001\006\001\007\001\002\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\022\001\017\001\024\001\019\001\020\001\021\001\
\022\001\255\255\024\001\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\255\255\255\255\004\001\005\001\006\001\007\001\023\001\009\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001"

let yynames_const = "\
  INT\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EQUAL\000\
  EQUALEQUAL\000\
  LE\000\
  LT\000\
  GE\000\
  GT\000\
  NOT\000\
  AND\000\
  OR\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  READ\000\
  PRINT\000\
  SEMICOLON\000\
  LBRACE\000\
  RBRACE\000\
  LBLOCK\000\
  RBLOCK\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 20 "parser.mly"
              ( _1 )
# 286 "parser.ml"
               : S.program))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 24 "parser.mly"
                              ( (_2,_3) )
# 294 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 28 "parser.mly"
               ( _1@[_2] )
# 302 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "parser.mly"
      ( [] )
# 308 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 33 "parser.mly"
                  ( (_1, _2) )
# 316 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
     ( S.TINT )
# 322 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 38 "parser.mly"
                         ( S.TARR _3 )
# 329 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 42 "parser.mly"
            ( _1@[_2] )
# 337 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
   ( [] )
# 343 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 47 "parser.mly"
       ( _1 )
# 350 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lv) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 51 "parser.mly"
                           ( S.ASSIGN(_1, _3) )
# 358 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lv) in
    Obj.repr(
# 52 "parser.mly"
                             ( S.ASSIGN(_1, S.ADD(S.LV _1, NUM 1)) )
# 365 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 53 "parser.mly"
                                          ( S.IF(_3, _5, _7) )
# 374 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 54 "parser.mly"
                     ( S.WHILE(_2, _3) )
# 382 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    Obj.repr(
# 55 "parser.mly"
                                                ( S.DOWHILE(_2, _5) )
# 390 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 56 "parser.mly"
                                      ( S.READ(_3) )
# 397 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    Obj.repr(
# 57 "parser.mly"
                                        ( S.PRINT(_3) )
# 404 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 58 "parser.mly"
            ( S.BLOCK _1 )
# 411 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
    ( S.ID _1 )
# 418 "parser.ml"
               : 'lv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 63 "parser.mly"
                        ( S.ARR(_1, _3) )
# 426 "parser.ml"
               : 'lv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 67 "parser.mly"
        (S.NUM _1 )
# 433 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lv) in
    Obj.repr(
# 68 "parser.mly"
         (S.LV _1 )
# 440 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 69 "parser.mly"
                   ( S.ADD(_1, _3) )
# 448 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 70 "parser.mly"
                    ( S.SUB(_1, _3) )
# 456 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 71 "parser.mly"
                   ( S.MUL(_1, _3) )
# 464 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 72 "parser.mly"
                    ( S.DIV(_1, _3) )
# 472 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 73 "parser.mly"
                ( S.MINUS(_2) )
# 479 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 74 "parser.mly"
              ( S.NOT(_2) )
# 486 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 75 "parser.mly"
                 ( S.LT(_1, _3) )
# 494 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 76 "parser.mly"
                 ( S.LE(_1, _3) )
# 502 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 77 "parser.mly"
                 ( S.GT(_1, _3) )
# 510 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 78 "parser.mly"
                 ( S.GE(_1, _3) )
# 518 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 79 "parser.mly"
                         ( S.EQ(_1, _3) )
# 526 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 80 "parser.mly"
                  ( S.AND(_1, _3) )
# 534 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 81 "parser.mly"
                 ( S.OR(_1, _3) )
# 542 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 82 "parser.mly"
                        ( _2 )
# 549 "parser.ml"
               : 'exp))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : S.program)
